* Design

** Development

- ~utop~ should be started from the ~bin~ directory, otherwise it
  attempts to load the ~Js_common~ library and fails because it
  doesn't have compiled javascript support. See ~.ocamlinit-sample~ in
  that directory. Once it's started the buffer ~default-directory~
  will make it accessible (and restart-able) from any file in the
  project.

** Service Worker

The service worker can store data locally and take care of resending
failures. It allows the application to run offline.

1. [X] Connect with an open websocket
2. [X] Client request/response
3. [X] Local storage idempotently
4. [X] Resend everything for anti-entropy

*** Brr instead of sw_of_ocaml

I copied in some code from this [[https://github.com/derui/sw_of_ocaml][sw_of_ocaml]] repo, some of which is
outdated in its types (?). I couldn't get it working and I found a
[[https://ocamlverse.net/content/web_networking.html#ocaml-to-javascript][better list of up to date tools]] which lead me to [[https://github.com/dbuenzli/brr/blob/master/test/test_worker.ml][Brr's worker example]].

** Client

The client draws incoming ~Req~ messages. It sends outgoing ~Item~ s
to the service worker. The two loops are disconnected, the service
worker is expected to send back the message that was just created on
the client to add it to the drawing loop.

1. [X] Start service worker
2. [X] Event handlers on the basic buttons
3. [X] Just call our own ~dims~ to increase the size of the table,
   we'll wait until we make an item to get dims from the worker.
4. [ ] Make one editor and attach it to the cell

** js_common

1. [X] Did jv_item on the plane to convert dohickey types to
   javascript types, I think I missed a trick about deriving that
   produces this stuff automatically.

2. [ ] https://erratique.ch/software/jsont/doc/

** Server

1. [ ] Recv idempotently, sqlite
2. [ ] Broadcast
3. [ ] Average votes

* Network

1. [ ] Client
   1. [ ] Connect & send
   2. [ ] Local storage
   3. [ ] Resend everything
   4. [ ] Cursors

2. [ ] Server
   1. [ ] Recv idempotently, sqlite
   2. [ ] Broadcast
   3. [ ] Average votes

* Pages

1. [ ] Sign in

2. [ ] Index of all sheets, create new sheet via url

3. [ ] Table
   1. [ ] Title
   2. [ ] Add decision
   3. [ ] Add criteria
   4. [ ] Vote
   5. [ ] Export markdown

* Notes

- No JS in =lib= :: =utop= loads the =lib= directory and all of the
  libraries required to support it. This makes sense for the server,
  but =utop= can't load the =js_of_ocaml= library, it doesn't have
  the JS runtime primitives. Only add those dependencies to the
  =dune= files in the JS specific executable sources.

- Common libraries :: =utop= really only wants to load the stuff in
  =lib=, so the common code is loaded by that, and =lib= implements
  the server. There may be a better way to organize it.
